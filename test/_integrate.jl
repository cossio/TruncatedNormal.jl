using Base.Test

import TruncatedNormal
TN = TruncatedNormal

@testset "_integrate" begin
    @test TN._integrate(x -> sin(x[1]), [0,0], [1,1])[1] ≈ 0.22008771439959887511722616019644981605795100762385
    @test TN._integrate(x -> sin(x[1]), [0,0], [10,10])[1] ≈ 0.37614695120128492452184270896009967130907851899143

    # vector integrands
    @test TN._integrate(x -> [sin(x[1]), cos(x[2])], [0,0], [1,1])[1] ≈ [0.22008771439959887511722616019644981605795100762385, 0.49004684942070452288726392633561039632921478024701]
    @test TN._integrate(x -> [sin(x[1]), cos(x[2])], [0,0], [10,10])[1] ≈ [0.37614695120128492452184270896009967130907851994959, 0.61166870467677593610809660127632598733482472893925]

    @test TN._integrate([0,0], [1,1])[1] ≈ 0.55774628535103364077463611410230002315246308408088
    @test TN._integrate([0,0], [10,10])[1] ≈ 0.78539816339744830961566084581987572104929234656319
end

@testset "_integrate, with H" begin
    @test TN._integrate(x -> sin(x[1]), [0,0], [1,1]; H=1)[1] ≈ 0.59826043471951376937686883665896762557607418989384
    @test TN._integrate(x -> sin(x[1]), [0,0], [10,10]; H=1)[1] ≈ 1.02247342228072404632232502922494254329668574200624

    # vector integrands
    @test TN._integrate(x -> [sin(x[1]), cos(x[2])], [0,0], [1,1]; H=1)[1] ≈ [0.59826043471951376937686883665896762557607418989384, 1.33208544587390710285175428539449191072542455707611]
    @test TN._integrate(x -> [sin(x[1]), cos(x[2])], [0,0], [10,10]; H=1)[1] ≈ [1.02247342228072404632232502922494254329668574200624, 1.6626879249599622452512008144646388153573000105919]

    @test TN._integrate([0,0], [1,1]; H=1)[1] ≈ 1.5161115923602481215646644862045795587542347284522
    @test TN._integrate([0,0], [10,10]; H=1)[1] ≈ 2.1349335556683917663658877173866436237587221250237   
end
