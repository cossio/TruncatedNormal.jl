using Test, Random, SpecialFunctions
import TruncatedNormal: _F1, _F2

@testset "F1 & F2" begin
    @testset "x ≈ y" begin
        @test _F1(1, 1 + 1e-8; thresh=1e-7) ≈ 1.7724538597677852522848499570355616296194525129226
        @test _F2(1, 1 + 1e-8; thresh=1e-7) ≈ 0.88622694317729652270424342383429653215361427389442
        @test _F1(0., 1e-10; thresh=1e-7) ≈ 8.8622692545275801364760669679481799470936057318833e-11
        @test _F2(0., 1e-10; thresh=1e-7) ≈ -0.88622692545275801364317556216755420464112992492873
    end

    @testset "x == y" begin
        Random.seed!(1)
        for r = 1 : 1000
            x = 10 * (rand() - 0.5)
            @test _F1(x, x) ≈ x * √π
            @test _F2(x, x) ≈ x^2 * √π - √π/2
        end
    end

    @testset "x ≤ 0 ≤ y || y ≤ 0 ≤ x" begin
        @test _F1(-1, 1) == 0
        @test _F1(-2, 1) ≈ -0.19018466649109201908602999736689089421341283247396
        @test _F2(-1, 1) ≈ -0.43654811322029241345172174484122488428321404645080
        @test _F1(-100, 1) ≈ -0.19964144074771737373883557939628614775906698169272
        @test _F2(-100, 1) ≈ -0.19964144074771737373883557939628614775906698169272
        @test _F1(-1, 100) ≈ 0.19964144074771737373883557939628614775906698169272
        @test _F2(-1, 100) ≈ -0.19964144074771737373883557939628614775906698169272

        @test _F1(-Inf, 0) ≈ -1
        @test _F1(-Inf, 1) ≈ -0.19964144074771737373883557939628614775906698169272
        @test _F1(-Inf, 4) ≈ -5.6267587793375513475446683601854348428628957869071e-8
        @test _F1(-Inf, 10) ≈ -1.8600379880104179814798479019315591686794461481307e-44
    end

    @testset "x, y < 0" begin
        @test _F1(-2, -1) ≈ -2.2903972654917515475649882641880377756080219194918
        @test _F2(-2, -1) ≈ 2.1703903055246431539180289542483966628176105020029
        @test _F1(-101, -100) ≈ -177.25424647380067965164998468281027353208843866970
        @test _F2(-101, -100) ≈ 17725.424647380067965164998468281027353208843866970
        @test _F1(-110, -150) ≈ -194.97797954232209109237724636721466012249482102215
        @test _F2(-110, -150) ≈ 21447.577749655430020161497100393612613474430312437
    end

    @testset "x, y > 0" begin
        @test _F1(1, 2) ≈ 2.2903972654917515475649882641880377756080219194918
        @test _F2(1, 2) ≈ 2.1703903055246431539180289542483966628176105020029
        @test _F1(100, 101) ≈ 177.25424647380067965164998468281027353208843866970
        @test _F2(100, 101) ≈ 17725.424647380067965164998468281027353208843866970
        @test _F1(110, 150) ≈ 194.97797954232209109237724636721466012249482102215
        @test _F2(110, 150) ≈ 21447.577749655430020161497100393612613474430312437

        @test _F1(100, 115) ≈ 177.25424647380067965164998468281027353208843866970
        @test _F2(100, 115) ≈ 17725.424647380067965164998468281027353208843866970
    end

    @testset "F(x, y) == F(y, x)" begin
        Random.seed!(1)
        for r = 1 : 1000
            x, y = 10 .* (rand(2) .- 0.5)
            @test _F1(x, y) == _F1(y, x)
            @test _F2(x, y) == _F2(y, x)
        end
    end

    @testset "Random numbers" begin
        Random.seed!(1)
        for r = 1:1000
            x, y = rand(2) .- 0.5
            @test _F1(x, y) ≈ (exp(-x^2) - exp(-y^2)) / (erf(y) - erf(x))
            @test _F2(x, y) ≈ (exp(-x^2)*x - exp(-y^2)*y) / (erf(y) - erf(x))
        end
    end
end


@testset "F1 & F2 (infinite arguments)" begin
    @test _F1(Inf, Inf) == Inf
    @test _F1(-Inf, -Inf) == -Inf
    @test _F1(-Inf, Inf) == _F1(Inf, -Inf) == 0

    @test _F2(-Inf, Inf) == _F2(Inf, -Inf) == 0
    @test _F2(Inf, Inf) == _F2(-Inf, -Inf) == Inf

    for v in (0, 1, -1)
        @test _F1(-Inf, v) ≈ _F1(v, -Inf) ≈ _F1(-1e20, v) ≈ _F1(v, -1e20)
        @test _F2(-Inf, v) ≈ _F2(v, -Inf) ≈ _F2(-1e20, v) ≈ _F2(v, -1e20)
        @test _F1(Inf, v) ≈ _F1(v, Inf) ≈ _F1(1e20, v) ≈ _F1(v, 1e20)
        @test _F2(Inf, v) ≈ _F2(v, Inf) ≈ _F2(1e20, v) ≈ _F2(v, 1e20)
    end

    Random.seed!(1)
    for r = 1:100
        v = 10rand() - 5
        @test _F1(-Inf, v) ≈ _F1(v, -Inf) ≈ _F1(-1e20, v) ≈ _F1(v, -1e20)
        @test _F2(-Inf, v) ≈ _F2(v, -Inf) ≈ _F2(-1e20, v) ≈ _F2(v, -1e20)
        @test _F1(Inf, v) ≈ _F1(v, Inf) ≈ _F1(1e20, v) ≈ _F1(v, 1e20)
        @test _F2(Inf, v) ≈ _F2(v, Inf) ≈ _F2(1e20, v) ≈ _F2(v, 1e20)
    end
end